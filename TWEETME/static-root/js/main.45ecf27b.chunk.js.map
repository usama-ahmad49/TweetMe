{"version":3,"sources":["logo.svg","tweets/components.js","lookup/components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TweetsComponents","props","textAreaRef","React","createRef","useState","newTweets","setNewTweets","className","onSubmit","event","preventDefault","newVal","current","value","tempNewTweets","unshift","content","likes","id","ref","required","type","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","e","send","loadTweets","finalTweetsInit","alert","map","item","index","Tweet","tweet","key","ActionBtn","action","setLikes","userLike","setUserLike","actionDisplay","display","onClick","App","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","document","getElementById","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.45ecf27b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useEffect, useState} from \"react\";\r\n\r\nimport {loadTweets} from \"../lookup\";\r\n\r\n\r\nexport function TweetsComponents(props){\r\n    const textAreaRef = React.createRef()\r\n    const [newTweets,setNewTweets] = useState([])\r\n    const handleSubmit =(event) => {\r\n        event.preventDefault()\r\n        const newVal = textAreaRef.current.value\r\n        let tempNewTweets = [...newTweets]\r\n        //change this to a server side call\r\n        tempNewTweets.unshift({\r\n            content : newVal,\r\n            likes : 0,\r\n            id :1234\r\n        })\r\n        setNewTweets(tempNewTweets)\r\n        textAreaRef.current.value = ''\r\n\r\n    }\r\n    return <div className={props.className}>\r\n        <div className='col-12 mb-3'>\r\n            <form onSubmit={handleSubmit}>\r\n        <textarea ref={textAreaRef} required={true} className='col-12 mb-3 form-controll'>\r\n        </textarea>\r\n        <button type='submit' className='btn btn-primary my-3'>Tweet</button>\r\n    </form>\r\n        </div>\r\n        <TweetsList newTweets ={newTweets} />\r\n    </div>\r\n}\r\n\r\n\r\nexport function TweetsList(props){\r\n    const [tweetsInit, setTweetsInit] = useState(props.newTweets ? props.newTweets : [])\r\n    const [tweets,setTweets] =useState([])\r\n    // setTweetsInit([...props.newTweets].concat(tweetsInit))\r\n    useEffect(()=> {\r\n        const final = [...props.newTweets].concat(tweetsInit) //this line has to come first or new tweets wont be on top\r\n        if (final.length !== tweets.length){\r\n            setTweets(final)\r\n        }\r\n\r\n    },[props.newTweets,tweets, tweetsInit])\r\n\r\n    useEffect(() => {\r\n        const myCallback = (response,status) => {\r\n            if (status===200){\r\n                const finalTweetsInit = [...response].concat(tweetsInit)\r\n                setTweetsInit(finalTweetsInit)\r\n            }\r\n            else {\r\n                alert(\"there was an error\")\r\n            }\r\n        }\r\n        loadTweets(myCallback)\r\n    },[tweetsInit])\r\n    return tweets.map((item,index)=>{\r\n            return <Tweet tweet = {item} className='my-5 py-5 border bg-white text-dark' key={`${index}-{item.id}`}/>\r\n          })\r\n}\r\n\r\n\r\nexport function ActionBtn(props){\r\n    const {tweet,action}=props\r\n    const [likes,setLikes]= useState(tweet.likes ? tweet.likes :0)\r\n    const [userLike, setUserLike] = useState(tweet.userLike === true ? true : false)\r\n    const className = props.className ? props.className : 'btn btn-primary btn-group'\r\n    const actionDisplay = action.display ? action.display:'Action'\r\n\r\n\r\n    const handleClick = (event) => {\r\n        event.preventDefault()\r\n        if (action.type ==='like'){\r\n            if(userLike===true){\r\n                setLikes(likes - 1)\r\n                setUserLike(false)\r\n            }\r\n            else {\r\n                setUserLike(true)\r\n                setLikes(tweet.likes+1)\r\n            }\r\n\r\n        }\r\n    }\r\n    const display = action.type === 'like'? `${likes} ${actionDisplay}` : actionDisplay\r\n    return <button className = {className} onClick={handleClick}> {display}</button>\r\n    }\r\n\r\nexport function Tweet(props){\r\n    const {tweet} = props\r\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\r\n    return<div className={className}>\r\n        <p>{tweet.id}-{tweet.content}</p>\r\n        <div className='btn btn-block'>\r\n            <ActionBtn tweet={tweet} action = {{type: \"like\", display:\"Likes\"}}/>\r\n            <ActionBtn tweet={tweet} action = {{type: \"unlike\",  display:\"Unlikes\"}}/>\r\n            <ActionBtn tweet={tweet} action = {{type: \"retweet\",  display:\"Retweet\"}}/>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n","\r\nexport function loadTweets(callback) {\r\n    const xhr = new XMLHttpRequest()\r\n    const method = 'GET'\r\n    const url = \"http://localhost:8080/api/tweets/\"\r\n    xhr.responseType = \"json\"\r\n    xhr.open(method, url)\r\n    xhr.onload = function () {\r\n        callback(xhr.response,xhr.status)\r\n    }\r\n    xhr.onerror = function (e){\r\n        callback({\"message\":\"The Request was an error\"},400)\r\n    }\r\n    xhr.send()\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {TweetsComponents} from \"./tweets\";\n\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <div>\n          <TweetsComponents />\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {TweetsComponents} from \"./tweets\";\nimport * as serviceWorker from './serviceWorker';\n\n\nconst tweets=document.getElementById('TWEETME')\nif(tweets){\n    ReactDOM.render(<React.StrictMode><TweetsComponents/></React.StrictMode>, tweets);\n}\nconst appEl=document.getElementById('root')\nif(appEl){\n    ReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n}\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}