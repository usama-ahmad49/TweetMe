{"version":3,"sources":["logo.svg","lookup/components.js","tweets/buttons.js","tweets/lookup.js","tweets/detail.js","tweets/list.js","tweets/create.js","tweets/components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","backendLookup","method","endpoint","callback","data","jsonData","JSON","stringify","xhr","XMLHttpRequest","url","responseType","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","open","setRequestHeader","onload","response","status","onerror","e","send","ActionBtn","props","tweet","action","didPerformAction","likes","className","actionDisplay","display","handleActionBackendEvent","type","onClick","event","preventDefault","tweetId","id","apiTweetAction","ParentTweet","parent","Tweet","hideActions","didRetweet","useState","actionTweet","setActionTweet","match","window","loaction","pathname","urltweetId","group","isDetail","handlePerformAction","newActionTweet","content","Fragment","location","href","TweetsList","newTweets","tweetsInit","setTweetsInit","tweets","setTweets","tweetsDidSet","setTweetsDidSet","useEffect","final","concat","username","apiTweetList","alert","handleDidRetweet","newTweet","updatedTweetInit","unshift","updatedFinalTweets","map","item","index","key","TweetCreate","textAreaRef","React","createRef","didTweet","handleBackendUpdate","Response","onSubmit","newVal","current","value","ref","required","TweetsComponents","canTweet","setNewTweets","tempNewTweets","TweetDetailComponent","tweetid","didLookup","setDidLookup","setTweet","handleBackendLookup","App","src","logo","alt","target","rel","Boolean","hostname","appEl","getElementById","ReactDOM","render","createElement","dataset","querySelectorAll","forEach","container","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.25df2fe2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","function getCookie(name) {\r\n    let cookieValue = null;\r\n    if (document.cookie && document.cookie !== '') {\r\n        const cookies = document.cookie.split(';');\r\n        for (let i = 0; i < cookies.length; i++) {\r\n            const cookie = cookies[i].trim();\r\n            // Does this cookie string begin with the name we want?\r\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return cookieValue;\r\n}\r\n\r\nexport function backendLookup(method,endpoint, callback, data){\r\n    let jsonData;\r\n    if(data){\r\n        jsonData=JSON.stringify(data)\r\n    }\r\n    const xhr = new XMLHttpRequest()\r\n    const url = `http://localhost:8080/api/${endpoint}`\r\n    xhr.responseType = \"json\"\r\n    const csrftoken = getCookie('csrftoken');\r\n    xhr.open(method, url)\r\n    xhr.setRequestHeader('Content-Type','application/json')\r\n\r\n    if(csrftoken){\r\n        xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\",\"XMLHttpRequest\")\r\n        xhr.setRequestHeader(\"X-Requested-With\",\"XMLHttpRequest\")\r\n        xhr.setRequestHeader(\"X-CSRFToken\",csrftoken)\r\n    }\r\n\r\n    xhr.onload = function () {\r\n        callback(xhr.response,xhr.status)\r\n    }\r\n    xhr.onerror = function (e){\r\n        callback({\"message\":\"The Request was an error\"},400)\r\n    }\r\n    xhr.send(jsonData)\r\n}\r\n\r\n","import React from \"react\";\r\n\r\nimport {\r\n    apiTweetAction,\r\n} from \"./lookup\";\r\n\r\nexport function ActionBtn(props) {\r\n    const { tweet, action, didPerformAction } = props\r\n    const likes = tweet.likes ? tweet.likes : 0\r\n    const className = props.className ? props.className : 'btn btn-primary btn-group'\r\n    const actionDisplay = action.display ? action.display : 'Action'\r\n\r\n\r\n    const handleActionBackendEvent = (response, status) => {\r\n        if ((status === 200 || status === 201) && didPerformAction) {\r\n            // setLikes(response.likes)\r\n            didPerformAction(response, status)\r\n        }\r\n    }\r\n    const handleClick = (event) => {\r\n        event.preventDefault()\r\n        apiTweetAction(tweet.id, action.type, handleActionBackendEvent)\r\n\r\n    }\r\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay\r\n    return <button className={className} onClick={handleClick}> {display}</button>\r\n}","import { backendLookup } from '../lookup'\r\n\r\n\r\nexport function apiTweetCreate(newTweet, callback) {\r\n    backendLookup(\"POST\", \"/tweets/create/\", callback, { content: newTweet })\r\n}\r\n\r\nexport function apiTweetAction(tweetId, action, callback) {\r\n    const data = { id: tweetId, action: action }\r\n    backendLookup(\"POST\", \"/tweets/action/\", callback, data)\r\n}\r\n\r\nexport function apiTweetdetail(tweetId,callback) {\r\n    backendLookup(\"GET\", `/tweets/${tweetId}`, callback)\r\n} \r\n\r\n\r\nexport function apiTweetList(username,callback) {\r\n    let endpoint = \"/tweets/\"\r\n    if(username){\r\n        endpoint = `/tweets/?username=${username}`\r\n    }\r\n    backendLookup(\"GET\", endpoint, callback)\r\n} ","import React, {useState} from \"react\";\r\nimport {ActionBtn} from './buttons'\r\n\r\n\r\nexport function ParentTweet(props) {\r\n    const { tweet } = props\r\n    return tweet.parent ? <div className='row'>\r\n        <div className='col-11 mx-auto p-3 border rounded bg'>\r\n            <p className='mb-0 text-muted small'>Retweet</p>\r\n            <Tweet hideActions className={' '} tweet={tweet.parent} />\r\n        </div>\r\n    </div> : null\r\n}\r\n\r\n\r\nexport function Tweet(props) {\r\n    const { tweet, didRetweet, hideActions } = props\r\n    const [actionTweet, setActionTweet] = useState(props.tweet ? props.tweet : null)\r\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\r\n    \r\n    const path = window.loaction.pathname\r\n    const match = path.match(/(?<tweetid>\\d+)/)\r\n    const urltweetId=match ? match.group.tweetId : -1\r\n    \r\n    const isDetail =`${tweet.id}` === `${urltweetId}`\r\n    const handleLink =(event)=>{\r\n        event.preventDefault()\r\n        window.location.href = `${tweet.id}`\r\n    }\r\n    const handlePerformAction = (newActionTweet, status) => {\r\n        if (status === 200) {\r\n            setActionTweet(newActionTweet)\r\n        } else if (status === 201) {\r\n            if (didRetweet) {\r\n                didRetweet(newActionTweet)\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    return <div className={className}>\r\n        <div>\r\n            <p>{tweet.id}-{tweet.content}</p>\r\n            <ParentTweet tweet={tweet} />\r\n        </div>\r\n        <div className='btn btn-group'>\r\n        {(actionTweet && hideActions !== true) && <React.Fragment>\r\n                <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{ type: \"like\", display: \"Likes\" }} />\r\n                <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{ type: \"unlike\", display: \"Unlikes\" }} />\r\n                <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{ type: \"retweet\", display: \"Retweet\" }} />\r\n            </React.Fragment>\r\n        }\r\n            {isDetail === true? null : <button className=\"btn btn-outline-primary\" onClick={handleLink}>View</button>}\r\n        </div>\r\n    </div>\r\n}\r\n","import React, { useEffect, useState } from \"react\"\r\nimport {apiTweetList} from \"./lookup\";\r\n\r\nimport {Tweet} from './detail'\r\n\r\nexport function TweetsList(props) {\r\n    const [tweetsInit, setTweetsInit] = useState(props.newTweets ? props.newTweets : [])\r\n    const [tweets, setTweets] = useState([])\r\n    const [tweetsDidSet, setTweetsDidSet] = useState(false)\r\n    // setTweetsInit([...props.newTweets].concat(tweetsInit))\r\n    useEffect(() => {\r\n        const final = [...props.newTweets].concat(tweetsInit) //this line has to come first or new tweets wont be on top\r\n        if (final.length !== tweets.length) {\r\n            setTweets(final)\r\n        }\r\n\r\n    }, [props.newTweets, tweets, tweetsInit])\r\n\r\n    useEffect(() => {\r\n        if (tweetsDidSet === false) {\r\n\r\n\r\n            const handleTweetListLookup = (response, status) => {\r\n                if (status === 200) {\r\n                    // const finalTweetsInit = [...response].concat(tweetsInit)\r\n                    setTweetsInit(response)\r\n                    setTweetsDidSet(true)\r\n                } else {\r\n                    alert(\"there was an error\")\r\n                }\r\n            }\r\n            apiTweetList(props.username,handleTweetListLookup)\r\n        }\r\n    }, [tweetsInit, tweetsDidSet, setTweetsDidSet, props.username])\r\n\r\n\r\n    const handleDidRetweet = (newTweet) => {\r\n        const updatedTweetInit = [...tweetsInit]\r\n        updatedTweetInit.unshift(newTweet)\r\n        setTweetsInit(updatedTweetInit)\r\n        const updatedFinalTweets = [...tweets]\r\n        updatedFinalTweets.unshift(tweets)\r\n        setTweets(updatedFinalTweets)\r\n    }\r\n    return tweets.map((item, index) => {\r\n        return <Tweet tweet={item}\r\n            didRetweet={handleDidRetweet}\r\n            className='my-5 py-5 border bg-white text-dark'\r\n            key={`${index}-{item.id}`} />\r\n    })\r\n}\r\n\r\n","import React from \"react\"\r\nimport {apiTweetCreate} from \"./lookup\"\r\n\r\n\r\nexport function TweetCreate(props) {\r\n    const textAreaRef = React.createRef()\r\n    const {didTweet} = props\r\n    const handleBackendUpdate = (Response, status) => {\r\n        if (status === 201) {\r\n            didTweet(Response)\r\n        } else {\r\n            alert(\"An error has occured\")\r\n        }\r\n    }\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault()\r\n        const newVal = textAreaRef.current.value\r\n        //backend api request\r\n        apiTweetCreate(newVal, handleBackendUpdate)\r\n        textAreaRef.current.value = ''\r\n\r\n    }\r\n    return <div className={props.className}>\r\n            <form onSubmit={handleSubmit}>\r\n                <textarea ref={textAreaRef} required={true} className='col-12 mb-3 form-controll'>\r\n                </textarea>\r\n                <button type='submit' className='btn btn-primary my-3'>Tweet</button>\r\n            </form>\r\n    </div>\r\n    \r\n}\r\n","import React, {useEffect,useState} from \"react\"\r\nimport {TweetsList} from './list'\r\nimport {Tweet} from './detail'\r\nimport {apiTweetdetail} from './lookup'\r\nimport {TweetCreate} from './create'\r\n\r\n\r\n\r\nexport function TweetsComponents(props) {\r\n    const canTweet =props.canTweet ===\"false\" ? false : true\r\n    const [newTweets, setNewTweets] = useState([])\r\n    const handleNewTweet = (newTweet) => {\r\n        //a backend api response\r\n        let tempNewTweets = [...newTweets]\r\n        tempNewTweets.unshift(newTweet)\r\n        setNewTweets(tempNewTweets)\r\n    }\r\n    // const handleSubmit = (event) => {\r\n    //     event.preventDefault()\r\n    //     const newVal = textAreaRef.current.value\r\n    //     //backend api request\r\n    //     apiTweetCreate(newVal, handleBackendUpdate)\r\n    //     textAreaRef.current.value = ''\r\n\r\n    // }\r\n    return <div className={props.className}>\r\n        {canTweet ===true && <TweetCreate didTweet={handleNewTweet} className='col-12 mb-3' />}\r\n        <TweetsList newTweets={newTweets} {...props}/>\r\n    </div>\r\n    \r\n}\r\n\r\nexport function TweetDetailComponent(props){\r\n    const {tweetid} =props\r\n    const [didLookup, setDidLookup] = useState(false)\r\n    const [tweet, setTweet] = useState(null)\r\n    const handleBackendLookup = (Response,status) => {\r\n        if (status===200){\r\n            setTweet(Response)\r\n        }else{\r\n            alert(\"There was an error finding your tweet\")\r\n        }\r\n    }\r\n    useEffect(()=>{\r\n        if (didLookup===false){\r\n            apiTweetdetail(tweetid,handleBackendLookup)\r\n            setDidLookup(true)\r\n        }\r\n    }, [tweetid, didLookup, setDidLookup])\r\n    return tweet===null ? null : <Tweet tweet ={tweet} className={props.className}/>\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {TweetsComponents} from \"./tweets\";\n\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <div>\n          <TweetsComponents />\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {TweetsComponents,TweetDetailComponent} from \"./tweets\";\nimport * as serviceWorker from './serviceWorker';\n\n\nconst appEl=document.getElementById('root')\nif(appEl){\n    ReactDOM.render(<App />,appEl);\n}\n\nconst e =  React.createElement\nconst tweets=document.getElementById('TWEETME')\nif(tweets){\n    ReactDOM.render(e(TweetsComponents, tweets.dataset), tweets);\n}\n\nconst tweetDetailElements = document.querySelectorAll(\".TWEETME-detail\")\ntweetDetailElements.forEach(container=>{\n    ReactDOM.render(\n        e(TweetDetailComponent, container.dataset),\n        container);\n})\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}